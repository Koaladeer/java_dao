package de.htwberlin.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import de.htwberlin.exceptions.DataException;
import de.htwberlin.object.Fahrzeug;

/**
 * 
 * Die Klasse realisiert die Implementierung des Buchungsservice
 * 
 * author Patrick Dohmeier
 **/
public class FahrzeugDaoImpl implements FahrzeugDao {

	private Connection connection;

	public FahrzeugDaoImpl(Connection connection) {
		this.connection = connection;
	}

	/**
	 * Javadoc generated by Chatpgpt Retrieves the database connection.
	 *
	 * @return The database connection.
	 * @throws DataException If the connection is not set.
	 */
	private Connection getConnection() throws DataException {
		if (connection == null) {
			throw new DataException("Connection not set");
		}
		return connection;
	}

	/**
	 * Retrieves all vehicles from the database.
	 *
	 * @return A list of all vehicles.
	 * @throws SQLException If an SQL error occurs.
	 */
	public List<Fahrzeug> getAllFahzeuge() throws SQLException {
		ArrayList<Fahrzeug> fahrzeuge = new ArrayList<>();
		String query = "SELECT * FROM FAHRZEUG";
		try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
			while (rs.next()) {
				Fahrzeug fahrzeug = extractFahrzeugFromResultSet(rs);
				fahrzeuge.add(fahrzeug);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return fahrzeuge;
	}

	/**
	 * Retrieves a vehicle by its identifier.
	 *
	 * @param fzId The vehicle identifier.
	 * @return The retrieved vehicle, or null if not found.
	 * @throws SQLException If an SQL error occurs.
	 */
	public Fahrzeug getFahrzeugById(long fzId) throws SQLException {
		String query = "SELECT * FROM FAHRZEUG WHERE FZ_ID = ?";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setLong(1, fzId);
			ResultSet rs = stmt.executeQuery();
			if (rs.next()) {
				return extractFahrzeugFromResultSet(rs);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Retrieves a vehicle by its license plate number.
	 *
	 * @param kennzeichen The license plate number of the vehicle.
	 * @return The retrieved vehicle, or null if not found.
	 * @throws SQLException If an SQL error occurs.
	 */
	public Fahrzeug getFahrzeugByKennzeichen(String kennzeichen) throws SQLException {
		String query = "SELECT * FROM FAHRZEUG WHERE KENNZEICHEN = ?";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setString(1, kennzeichen);
			ResultSet rs = stmt.executeQuery();
			System.out.println("1");
			if (rs.next()) {
				System.out.println("3");
				return extractFahrzeugFromResultSet(rs);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Inserts a new vehicle into the database.
	 *
	 * @param fahrzeug The vehicle to be inserted.
	 * @throws SQLException If an SQL error occurs.
	 */
	public void insertFahrzeug(Fahrzeug fahrzeug) throws SQLException {
		String query = "INSERT INTO FAHRZEUG (FZ_ID, SSKL_ID, NUTZER_ID, KENNZEICHEN, FIN, ACHSEN, GEWICHT, ANMELDEDATUM, ABMELDEDATUM, ZULASSUNGSLAND) "
				+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setLong(1, fahrzeug.getFzId());
			stmt.setInt(2, fahrzeug.getSsklId());
			stmt.setInt(3, fahrzeug.getNutzerId());
			stmt.setString(4, fahrzeug.getKennzeichen());
			stmt.setString(5, fahrzeug.getFin());
			stmt.setInt(6, fahrzeug.getAchsen());
			stmt.setDouble(7, fahrzeug.getGewicht());
			stmt.setDate(8, new java.sql.Date(fahrzeug.getAnmeldedatum().getTime()));
			stmt.setDate(9, new java.sql.Date(fahrzeug.getAbmeldedatum().getTime()));
			stmt.setString(10, fahrzeug.getZulassungsland());

			stmt.executeUpdate();
		}
	}

	/**
	 * Updates an existing vehicle in the database.
	 *
	 * @param fahrzeug The vehicle to be updated.
	 * @throws SQLException If an SQL error occurs.
	 */
	public void updateFahrzeug(Fahrzeug fahrzeug) throws SQLException {
		String query = "UPDATE FAHRZEUG SET SSKL_ID = ?, NUTZER_ID = ?, KENNZEICHEN = ?, FIN = ?, ACHSEN = ?, "
				+ "GEWICHT = ?, ANMELDEDATUM = ?, ABMELDEDATUM = ?, ZULASSUNGSLAND = ? WHERE FZ_ID = ?";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setInt(1, fahrzeug.getSsklId());
			stmt.setInt(2, fahrzeug.getNutzerId());
			stmt.setString(3, fahrzeug.getKennzeichen());
			stmt.setString(4, fahrzeug.getFin());
			stmt.setInt(5, fahrzeug.getAchsen());
			stmt.setDouble(6, fahrzeug.getGewicht());
			stmt.setDate(7, new java.sql.Date(fahrzeug.getAnmeldedatum().getTime()));
			stmt.setDate(8, new java.sql.Date(fahrzeug.getAbmeldedatum().getTime()));
			stmt.setString(9, fahrzeug.getZulassungsland());
			stmt.setLong(10, fahrzeug.getFzId());

			stmt.executeUpdate();
		}
	}

	/**
	 * Deletes a vehicle from the database by its identifier.
	 *
	 * @param fzId The vehicle identifier.
	 * @throws SQLException If an SQL error occurs.
	 */
	public void deleteFzId(long fzId) throws SQLException {
		String query = "DELETE FROM FAHRZEUG WHERE FZ_ID = ?";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setLong(1, fzId);
			stmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Checks if a vehicle with the given license plate number is registered.
	 *
	 * @param kennzeichen The license plate number to check.
	 * @return true if the vehicle is registered, false otherwise.
	 */
	public boolean isVehicleRegistered(String kennzeichen) {
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean er = false;
		String query = "select sum(Anzahl) as Anzahl from(\r\n"
				+ "SELECT count(fz.kennzeichen) as Anzahl FROM fahrzeug fz JOIN fahrzeuggerat   fzg ON fz.fz_id = fzg.fz_id WHERE fz.kennzeichen = ? AND fz.abmeldedatum IS NULL AND fzg.status = 'active'\r\n"
				+ "union all\r\n"
				+ "SELECT count(b.kennzeichen) as Anzahl FROM buchung  b JOIN buchungstatus  bs ON b.b_id = bs.b_id WHERE b.kennzeichen = ?  and b.b_id = 1\r\n"
				+ ")";

		try {
			ps = getConnection().prepareStatement(query);
			ps.setString(1, kennzeichen);
			ps.setString(2, kennzeichen);
			rs = ps.executeQuery();

			if (rs.next()) {
				return rs.getInt("Anzahl") > 0;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return er;
	}
	public int getAxlesCount(String kennzeichen) {
		String query = "SELECT achsen FROM fahrzeug WHERE kennzeichen = ?";
		int re = 0 ;
		PreparedStatement pre = null;
		ResultSet rs = null;

		try {
			pre = getConnection().prepareStatement(query);
			pre.setString(1, kennzeichen);
			rs = pre.executeQuery();

			if (rs.next()) {
				 re = rs.getInt("achsen");
				 return re;
			}else {
				return 123;
			}
		} catch (SQLException ex) {
			throw new RuntimeException(ex);
		}
	}

	/**
	 * Extracts a Fahrzeug object from a ResultSet.
	 *
	 * @param rs The ResultSet containing the Fahrzeug data.
	 * @return The extracted Fahrzeug object.
	 * @throws SQLException If an SQL error occurs.
	 */
	private Fahrzeug extractFahrzeugFromResultSet(ResultSet rs) throws SQLException {
		long fzId = rs.getLong("FZ_ID");
		int ssklId = rs.getInt("SSKL_ID");
		int nutzerId = rs.getInt("NUTZER_ID");
		String kennzeichen = rs.getString("KENNZEICHEN");
		String fin = rs.getString("FIN");
		int achsen = rs.getInt("ACHSEN");
		double gewicht = rs.getDouble("GEWICHT");
		Date anmeldedatum = rs.getDate("ANMELDEDATUM");
		Date abmeldedatum = rs.getDate("ABMELDEDATUM");
		String zulassungsland = rs.getString("ZULASSUNGSLAND");

		return new Fahrzeug(fzId, ssklId, nutzerId, kennzeichen, fin, achsen, gewicht, anmeldedatum, abmeldedatum,
				zulassungsland);
	}
}
