package de.htwberlin.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import de.htwberlin.object.Mauterhebung;

/**
 * Javadoc generated by Chatpgpt The MauterhebungDaoImpl class implements
 * methods for accessing and manipulating Mauterhebung objects in the database.
 */
public class MauterhebungDaoImpl {

	private Connection connection;

	/**
	 * Constructs a MauterhebungDaoImpl object with the specified database
	 * connection.
	 *
	 * @param connection The database connection to be used.
	 */
	public MauterhebungDaoImpl(Connection connection) {
		this.connection = connection;

	}

	/**
	 * Retrieves all Mauterhebung objects from the database.
	 *
	 * @return A list of all Mauterhebung objects.
	 * @throws SQLException If an SQL error occurs.
	 */
	public List<Mauterhebung> getAllMauterhebungen() throws SQLException {
		List<Mauterhebung> mauterhebungList = new ArrayList<>();

		String query = "SELECT * FROM MAUTERHEBUNG";
		try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
			while (rs.next()) {
				Mauterhebung mauterhebung = extractMauterhebungFromResultSet(rs);
				mauterhebungList.add(mauterhebung);
			}
		}

		return mauterhebungList;
	}

	/**
	 * Retrieves a specific Mauterhebung object from the database based on its
	 * identifier.
	 *
	 * @param mautId The identifier of the Mauterhebung object.
	 * @return The Mauterhebung object with the specified identifier, or null if not
	 *         found.
	 * @throws SQLException If an SQL error occurs.
	 */
	public Mauterhebung getMauterhebungById(long mautId) throws SQLException {
		String query = "SELECT * FROM MAUTERHEBUNG WHERE MAUT_ID = ?";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setLong(1, mautId);
			try (ResultSet rs = stmt.executeQuery()) {
				if (rs.next()) {
					return extractMauterhebungFromResultSet(rs);
				}
			}
		}

		return null;
	}

	/**
	 * Inserts a new Mauterhebung object into the database.
	 *
	 * @param mauterhebung The Mauterhebung object to be inserted.
	 * @throws SQLException If an SQL error occurs.
	 */
	public void insertMauterhebung(Mauterhebung mauterhebung) throws SQLException {
		String query = "INSERT INTO MAUTERHEBUNG (MAUT_ID, ABSCHNITTS_ID, FZG_ID, KATEGORIE_ID, BEFAHRUNGSDATUM, KOSTEN) "
				+ "VALUES (?, ?, ?, ?, ?, ?)";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setLong(1, mauterhebung.getMautId());
			stmt.setInt(2, mauterhebung.getAbschnittsId());
			stmt.setLong(3, mauterhebung.getFzgId());
			stmt.setInt(4, mauterhebung.getKategorieId());
			stmt.setTimestamp(5, mauterhebung.getBefahrungsdatum());
			stmt.setDouble(6, mauterhebung.getKosten());

			stmt.executeUpdate();
		}
	}

	/**
	 * Updates an existing Mauterhebung object in the database.
	 *
	 * @param mauterhebung The Mauterhebung object to be updated.
	 * @throws SQLException If an SQL error occurs.
	 */
	public void updateMauterhebung(Mauterhebung mauterhebung) throws SQLException {
		String query = "UPDATE MAUTERHEBUNG SET ABSCHNITTS_ID = ?, FZG_ID = ?, KATEGORIE_ID = ?, BEFAHRUNGSDATUM = ?, "
				+ "KOSTEN = ? WHERE MAUT_ID = ?";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setInt(1, mauterhebung.getAbschnittsId());
			stmt.setLong(2, mauterhebung.getFzgId());
			stmt.setInt(3, mauterhebung.getKategorieId());
			stmt.setTimestamp(4, mauterhebung.getBefahrungsdatum());
			stmt.setDouble(5, mauterhebung.getKosten());
			stmt.setLong(6, mauterhebung.getMautId());

			stmt.executeUpdate();
		}
	}

	/**
	 * Deletes a specific Mauterhebung object from the database based on its
	 * identifier.
	 *
	 * @param mautId The identifier of the Mauterhebung object to be deleted.
	 * @throws SQLException If an SQL error occurs.
	 */
	public void deleteMauterhebung(long mautId) throws SQLException {
		String query = "DELETE FROM MAUTERHEBUNG WHERE MAUT_ID = ?";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setLong(1, mautId);

			stmt.executeUpdate();
		}
	}

	/**
	 * Retrieves the next free Maut ID from the database.
	 *
	 * @return The next free Maut ID, or -1 if not found.
	 * @throws SQLException If an SQL error occurs.
	 */
	public int getNextFreeMautID() throws SQLException {
		String query = "SELECT MIN(t1.MAUT_ID + 1) AS NEXT_FREE_MAUT_ID FROM mauterhebung t1 WHERE NOT EXISTS ( SELECT 1 FROM mauterhebung t2 WHERE t2.MAUT_ID = t1.MAUT_ID + 1)";
		try (PreparedStatement stmt = connection.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {
			if (rs.next()) {
				return rs.getInt("NEXT_FREE_MAUT_ID");
			}
		}
		return -1;
	}

	/**
	 * Extracts a Mauterhebung object from the given ResultSet.
	 *
	 * @param rs The ResultSet containing the Mauterhebung data.
	 * @return The extracted Mauterhebung object.
	 * @throws SQLException If an SQL error occurs.
	 */
	private Mauterhebung extractMauterhebungFromResultSet(ResultSet rs) throws SQLException {
		long mautId = rs.getLong("MAUT_ID");
		int abschnittsId = rs.getInt("ABSCHNITTS_ID");
		long fzgId = rs.getLong("FZG_ID");
		int kategorieId = rs.getInt("KATEGORIE_ID");
		Timestamp befahrungsdatum = rs.getTimestamp("BEFAHRUNGSDATUM");
		double kosten = rs.getDouble("KOSTEN");

		return new Mauterhebung(mautId, abschnittsId, fzgId, kategorieId, befahrungsdatum, kosten);
	}
}
